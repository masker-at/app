import { FC, useCallback, useState } from 'react';
import useEnable2FA from '../../api-hooks/useEnable2FA';
import useGenerate2FAToken from '../../api-hooks/useGenerate2FAToken';
import useGenerateRecoveryCodes from '../../api-hooks/useGenerateRecoveryCodes';
import Input from '../Input';

const TwoFactorDisabled: FC = () => {
  const [flowState, setFlowState] = useState<'INITIAL' | 'TURN_ON_1' | 'TURN_ON_2' | 'TURN_ON_3'>(
    'INITIAL',
  );

  const { mutateAsync: generateRecoveryCodes, data: recoveryCodes } = useGenerateRecoveryCodes();
  const handleTurnOnClick = useCallback(async () => {
    await generateRecoveryCodes();
    setFlowState('TURN_ON_1');
  }, [generateRecoveryCodes]);

  const { mutateAsync: generateToken, data: generateTokenData } = useGenerate2FAToken();

  const [isCopied, setIsCopied] = useState(false);
  const handleCopyClick = useCallback(() => {
    const input = document.getElementById('2fa-token') as HTMLInputElement;
    input.select();
    document.execCommand('copy');
    input.setSelectionRange(0, 0);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  }, []);

  const { mutate: enable2FA, error } = useEnable2FA();
  let errorMessage: string | null = null;
  if (error) {
    switch (error.response?.data.code) {
      case 'INVALID_2FA_CODE':
        errorMessage = 'The code is invalid or expired. Please try again';
        break;
      default:
        errorMessage = 'Sorry, something went wrong. Please try later';
    }
  }

  switch (flowState) {
    case 'INITIAL':
      return (
        <>
          <p className="text-sm mt-1 mb-2">Turn on 2FA to protect your account</p>
          <button
            type="button"
            className="button bg-primary active:bg-primary-darker"
            onClick={handleTurnOnClick}
          >
            Turn on
          </button>
        </>
      );

    case 'TURN_ON_1':
      return (
        <>
          <h2 className="text-lg mt-3">Step 1: Store your recovery codes</h2>
          <p>
            If you ever lose your device, you will be able to log in using one of these one-time
            recovery codes. Store them in a secure place.
          </p>

          <ul className="font-mono mt-2">
            {recoveryCodes!.map((code) => (
              <li key={code}>{code}</li>
            ))}
          </ul>

          <button
            type="button"
            className="button bg-primary active:bg-primary-darker w-64 mt-2"
            onClick={async () => {
              await generateToken();
              setFlowState('TURN_ON_2');
            }}
          >
            Next &rarr;
          </button>
        </>
      );

    case 'TURN_ON_2':
      return (
        <>
          <h2 className="text-lg mt-3">Step 2: Connect your device</h2>
          <p>
            Scan this QR code with your authenticator app, such as Google Authenticator, FreeOTP or
            Authy:
            <img alt="2FA QR code" src={generateTokenData!.qrDataURL} />
            or enter the following setup code:
          </p>
          <div className="flex">
            <button
              type="button"
              onClick={handleCopyClick}
              className="text-primary-darker underline"
            >
              {isCopied ? 'Copied!' : 'Copy'}
            </button>
            <input
              readOnly
              value={generateTokenData!.base32}
              className="font-mono ml-1 flex-grow border border-gray-400 rounded px-1"
              id="2fa-token"
            />
          </div>
          <button
            type="button"
            className="button bg-primary active:bg-primary-darker mt-2"
            onClick={() => setFlowState('TURN_ON_3')}
          >
            Next &rarr;
          </button>
        </>
      );

    case 'TURN_ON_3':
      return (
        <>
          <h2 className="text-lg mt-3">Step 3: Authorize your device</h2>
          <p id="2fa-code-label">Enter the 6-digit code generated by your authenticator app:</p>

          <form
            className="flex flex-col w-64"
            onSubmit={async (event) => {
              event.preventDefault();
              const input = document.getElementById('2fa-code') as HTMLInputElement;
              enable2FA(input.value);
            }}
          >
            <Input
              type="text"
              minLength={6}
              maxLength={6}
              id="2fa-code"
              aria-labelledby="2fa-code-label"
              required
            />
            {errorMessage && <p className="text-red-600 text-sm">{errorMessage}</p>}
            <div className="flex mt-2">
              <button
                type="button"
                className="button bg-blue-500 active:bg-blue-700 mr-2 flex-1"
                onClick={() => setFlowState('TURN_ON_2')}
              >
                &larr; Back
              </button>
              <button type="submit" className="button bg-primary active:bg-primary-darker flex-1">
                Next &rarr;
              </button>
            </div>
          </form>
        </>
      );

    default:
      return null;
  }
};
export default TwoFactorDisabled;
